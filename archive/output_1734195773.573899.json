{"content": {"suites": {"0": {"status": {"total_pass": 0, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 2}, "tests": {"0": {"status": "ERROR", "message": "platform = 'android'\n\n    @staticmethod\n    def create_driver(platform: str):\n        # Fetch capabilities from the Config class\n        capabilities = Config.get_capabilities(platform)\n        print(f\"Capabilities received: {capabilities}\")\n    \n        # Create AppiumOptions for Android\n        if platform == \"android\":\n            options = UiAutomator2Options()\n            for key, value in capabilities.items():\n                options.set_capability(key, value)\n        else:\n            raise ValueError(f\"Unsupported platform: {platform}\")\n    \n        # Start the driver\n        try:\n>           driver = webdriver.Remote(\n                command_executor=\"http://localhost:4723/wd/hub\",\n                options=options\n            )\n\napp_driver/driver_setup.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n../../Library/Python/3.8/lib/python/site-packages/appium/webdriver/webdriver.py:227: in __init__\n    super().__init__(\n../../Library/Python/3.8/lib/python/site-packages/selenium/webdriver/remote/webdriver.py:241: in __init__\n    self.start_session(capabilities)\n../../Library/Python/3.8/lib/python/site-packages/appium/webdriver/webdriver.py:319: in start_session\n    response = self.execute(RemoteCommand.NEW_SESSION, w3c_caps)\n../../Library/Python/3.8/lib/python/site-packages/selenium/webdriver/remote/webdriver.py:384: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fac68abd0a0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"An unknown server-side error occurred while pro...UI.app/Contents/Resources/app/node_modules/appium/node_modules/appium-base-driver/lib/protocol/protocol.js:380:37)\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: An unknown server-side error occurred while processing the command. Original error: Cannot start the 'com.gapinternational.genius.qa' application. Visit https://github.com/appium/appium/blob/master/docs/en/writing-running-appium/android/activity-startup.md for troubleshooting. Original error: 'com.gapinternational.genius.presentation.screen.splash.StartActivity' or 'com.gapinternational.genius.qa.com.gapinternational.genius.presentation.screen.splash.StartActivity' never started. Visit https://github.com/appium/appium/blob/master/docs/en/writing-running-appium/android/activity-startup.md for troubleshooting\nE       Stacktrace:\nE       UnknownError: An unknown server-side error occurred while processing the command. Original error: Cannot start the 'com.gapinternational.genius.qa' application. Visit https://github.com/appium/appium/blob/master/docs/en/writing-running-appium/android/activity-startup.md for troubleshooting. Original error: 'com.gapinternational.genius.presentation.screen.splash.StartActivity' or 'com.gapinternational.genius.qa.com.gapinternational.genius.presentation.screen.splash.StartActivity' never started. Visit https://github.com/appium/appium/blob/master/docs/en/writing-running-appium/android/activity-startup.md for troubleshooting\nE           at getResponseForW3CError (/Applications/Appium Server GUI.app/Contents/Resources/app/node_modules/appium/node_modules/appium-base-driver/lib/protocol/errors.js:804:9)\nE           at asyncHandler (/Applications/Appium Server GUI.app/Contents/Resources/app/node_modules/appium/node_modules/appium-base-driver/lib/protocol/protocol.js:380:37)\n\n../../Library/Python/3.8/lib/python/site-packages/selenium/webdriver/remote/errorhandler.py:232: WebDriverException\n\nDuring handling of the above exception, another exception occurred:\n\nrequest = <SubRequest 'driver' for <Function test_open_app>>\n\n    @pytest.fixture(scope=\"module\")\n    def driver(request):\n        platform = request.config.getoption(\"--platform\")\n>       driver_instance = Driver.create_driver(platform)\n\ntests/test_login.py:9: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nplatform = 'android'\n\n    @staticmethod\n    def create_driver(platform: str):\n        # Fetch capabilities from the Config class\n        capabilities = Config.get_capabilities(platform)\n        print(f\"Capabilities received: {capabilities}\")\n    \n        # Create AppiumOptions for Android\n        if platform == \"android\":\n            options = UiAutomator2Options()\n            for key, value in capabilities.items():\n                options.set_capability(key, value)\n        else:\n            raise ValueError(f\"Unsupported platform: {platform}\")\n    \n        # Start the driver\n        try:\n            driver = webdriver.Remote(\n                command_executor=\"http://localhost:4723/wd/hub\",\n                options=options\n            )\n            print(\"App successfully launched.\")\n            return driver\n        except Exception as e:\n            print(f\"Error launching the app: {e}\")\n>           raise RuntimeError(f\"Failed to create driver for platform {platform}: {e}\")\nE           RuntimeError: Failed to create driver for platform android: Message: An unknown server-side error occurred while processing the command. Original error: Cannot start the 'com.gapinternational.genius.qa' application. Visit https://github.com/appium/appium/blob/master/docs/en/writing-running-appium/android/activity-startup.md for troubleshooting. Original error: 'com.gapinternational.genius.presentation.screen.splash.StartActivity' or 'com.gapinternational.genius.qa.com.gapinternational.genius.presentation.screen.splash.StartActivity' never started. Visit https://github.com/appium/appium/blob/master/docs/en/writing-running-appium/android/activity-startup.md for troubleshooting\nE           Stacktrace:\nE           UnknownError: An unknown server-side error occurred while processing the command. Original error: Cannot start the 'com.gapinternational.genius.qa' application. Visit https://github.com/appium/appium/blob/master/docs/en/writing-running-appium/android/activity-startup.md for troubleshooting. Original error: 'com.gapinternational.genius.presentation.screen.splash.StartActivity' or 'com.gapinternational.genius.qa.com.gapinternational.genius.presentation.screen.splash.StartActivity' never started. Visit https://github.com/appium/appium/blob/master/docs/en/writing-running-appium/android/activity-startup.md for troubleshooting\nE               at getResponseForW3CError (/Applications/Appium Server GUI.app/Contents/Resources/app/node_modules/appium/node_modules/appium-base-driver/lib/protocol/errors.js:804:9)\nE               at asyncHandler (/Applications/Appium Server GUI.app/Contents/Resources/app/node_modules/appium/node_modules/appium-base-driver/lib/protocol/protocol.js:380:37)\n\napp_driver/driver_setup.py:30: RuntimeError\n", "test_name": "test_open_app", "rerun": "0"}, "1": {"status": "ERROR", "message": "platform = 'android'\n\n    @staticmethod\n    def create_driver(platform: str):\n        # Fetch capabilities from the Config class\n        capabilities = Config.get_capabilities(platform)\n        print(f\"Capabilities received: {capabilities}\")\n    \n        # Create AppiumOptions for Android\n        if platform == \"android\":\n            options = UiAutomator2Options()\n            for key, value in capabilities.items():\n                options.set_capability(key, value)\n        else:\n            raise ValueError(f\"Unsupported platform: {platform}\")\n    \n        # Start the driver\n        try:\n>           driver = webdriver.Remote(\n                command_executor=\"http://localhost:4723/wd/hub\",\n                options=options\n            )\n\napp_driver/driver_setup.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n../../Library/Python/3.8/lib/python/site-packages/appium/webdriver/webdriver.py:227: in __init__\n    super().__init__(\n../../Library/Python/3.8/lib/python/site-packages/selenium/webdriver/remote/webdriver.py:241: in __init__\n    self.start_session(capabilities)\n../../Library/Python/3.8/lib/python/site-packages/appium/webdriver/webdriver.py:319: in start_session\n    response = self.execute(RemoteCommand.NEW_SESSION, w3c_caps)\n../../Library/Python/3.8/lib/python/site-packages/selenium/webdriver/remote/webdriver.py:384: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fac68abd0a0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"An unknown server-side error occurred while pro...UI.app/Contents/Resources/app/node_modules/appium/node_modules/appium-base-driver/lib/protocol/protocol.js:380:37)\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: An unknown server-side error occurred while processing the command. Original error: Cannot start the 'com.gapinternational.genius.qa' application. Visit https://github.com/appium/appium/blob/master/docs/en/writing-running-appium/android/activity-startup.md for troubleshooting. Original error: 'com.gapinternational.genius.presentation.screen.splash.StartActivity' or 'com.gapinternational.genius.qa.com.gapinternational.genius.presentation.screen.splash.StartActivity' never started. Visit https://github.com/appium/appium/blob/master/docs/en/writing-running-appium/android/activity-startup.md for troubleshooting\nE       Stacktrace:\nE       UnknownError: An unknown server-side error occurred while processing the command. Original error: Cannot start the 'com.gapinternational.genius.qa' application. Visit https://github.com/appium/appium/blob/master/docs/en/writing-running-appium/android/activity-startup.md for troubleshooting. Original error: 'com.gapinternational.genius.presentation.screen.splash.StartActivity' or 'com.gapinternational.genius.qa.com.gapinternational.genius.presentation.screen.splash.StartActivity' never started. Visit https://github.com/appium/appium/blob/master/docs/en/writing-running-appium/android/activity-startup.md for troubleshooting\nE           at getResponseForW3CError (/Applications/Appium Server GUI.app/Contents/Resources/app/node_modules/appium/node_modules/appium-base-driver/lib/protocol/errors.js:804:9)\nE           at asyncHandler (/Applications/Appium Server GUI.app/Contents/Resources/app/node_modules/appium/node_modules/appium-base-driver/lib/protocol/protocol.js:380:37)\n\n../../Library/Python/3.8/lib/python/site-packages/selenium/webdriver/remote/errorhandler.py:232: WebDriverException\n\nDuring handling of the above exception, another exception occurred:\n\nrequest = <SubRequest 'driver' for <Function test_open_app>>\n\n    @pytest.fixture(scope=\"module\")\n    def driver(request):\n        platform = request.config.getoption(\"--platform\")\n>       driver_instance = Driver.create_driver(platform)\n\ntests/test_login.py:9: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nplatform = 'android'\n\n    @staticmethod\n    def create_driver(platform: str):\n        # Fetch capabilities from the Config class\n        capabilities = Config.get_capabilities(platform)\n        print(f\"Capabilities received: {capabilities}\")\n    \n        # Create AppiumOptions for Android\n        if platform == \"android\":\n            options = UiAutomator2Options()\n            for key, value in capabilities.items():\n                options.set_capability(key, value)\n        else:\n            raise ValueError(f\"Unsupported platform: {platform}\")\n    \n        # Start the driver\n        try:\n            driver = webdriver.Remote(\n                command_executor=\"http://localhost:4723/wd/hub\",\n                options=options\n            )\n            print(\"App successfully launched.\")\n            return driver\n        except Exception as e:\n            print(f\"Error launching the app: {e}\")\n>           raise RuntimeError(f\"Failed to create driver for platform {platform}: {e}\")\nE           RuntimeError: Failed to create driver for platform android: Message: An unknown server-side error occurred while processing the command. Original error: Cannot start the 'com.gapinternational.genius.qa' application. Visit https://github.com/appium/appium/blob/master/docs/en/writing-running-appium/android/activity-startup.md for troubleshooting. Original error: 'com.gapinternational.genius.presentation.screen.splash.StartActivity' or 'com.gapinternational.genius.qa.com.gapinternational.genius.presentation.screen.splash.StartActivity' never started. Visit https://github.com/appium/appium/blob/master/docs/en/writing-running-appium/android/activity-startup.md for troubleshooting\nE           Stacktrace:\nE           UnknownError: An unknown server-side error occurred while processing the command. Original error: Cannot start the 'com.gapinternational.genius.qa' application. Visit https://github.com/appium/appium/blob/master/docs/en/writing-running-appium/android/activity-startup.md for troubleshooting. Original error: 'com.gapinternational.genius.presentation.screen.splash.StartActivity' or 'com.gapinternational.genius.qa.com.gapinternational.genius.presentation.screen.splash.StartActivity' never started. Visit https://github.com/appium/appium/blob/master/docs/en/writing-running-appium/android/activity-startup.md for troubleshooting\nE               at getResponseForW3CError (/Applications/Appium Server GUI.app/Contents/Resources/app/node_modules/appium/node_modules/appium-base-driver/lib/protocol/errors.js:804:9)\nE               at asyncHandler (/Applications/Appium Server GUI.app/Contents/Resources/app/node_modules/appium/node_modules/appium-base-driver/lib/protocol/protocol.js:380:37)\n\napp_driver/driver_setup.py:30: RuntimeError\n", "test_name": "test_login", "rerun": "0"}}, "suite_name": "tests/test_login.py"}}}, "date": "December 14, 2024", "start_time": 1734195733.434997, "total_suite": 1, "status": "FAIL", "status_list": {"pass": "0", "fail": "0", "skip": "0", "error": "2", "xpass": "0", "xfail": "0", "rerun": "0"}, "total_tests": "2"}